#!/usr/bin/env ruby
require 'pcp/client'
require 'optparse'

ssl_key = '../pcp-broker/test-resources/ssl/private_keys/client01.example.com.pem'
ssl_cert = '../pcp-broker/test-resources/ssl/certs/client01.example.com.pem'
ssl_ca_cert = '../pcp-broker/test-resources/ssl/ca/ca_crt.pem'
debug = false
server = 'wss://localhost:8142/pcp'

OptionParser.new do |opts|
  opts.on("-d",  "--debug", "Run noisily") { |v| debug = v }
  opts.on("--ssl_key FILE", "Use this ssl key") { |v| ssl_key = v }
  opts.on("--ssl_cert FILE", "Use this ssl cert") { |v| ssl_cert = v }
  opts.on("--ssl_ca_cert FILE", "Use this ssl ca cert") { |v| ssl_ca_cert = v }
  opts.on("--server URL", "Server to connect to") { |v| server = v }
end.parse!

start_time = Time.now.to_f

Thread.new { EM.run }
Thread.pass until EM.reactor_running?

client = PCP::Client.new({:ssl_key => ssl_key,
                          :ssl_cert => ssl_cert,
                          :ssl_ca_cert => ssl_ca_cert,
                          :loglevel => debug ? Logger::DEBUG : Logger::WARN,
                          :server => server,
                         })

# Record the expected set of destinations from the destination_report,
# then all the responses from the rpc_blocking_response
mutex = Mutex.new
have_responses = ConditionVariable.new
responses = {}
expected = nil
ping_time = nil

client.on_message = proc do |message|
  mutex.synchronize do
    case message[:message_type]
    when 'http://puppetlabs.com/destination_report'
      expected = JSON.load(message.data)['targets']
    when 'http://puppetlabs.com/rpc_blocking_response'
      sender = message[:sender]
      time = Time.now.to_f - ping_time
      responses[sender] = time
      puts '%-55s %0.2f seconds' % [sender, time]
    else
      p [:unexpected_message, message]
    end

    have_responses.signal
  end
end

client.connect

if !client.associated?
  puts "Didn't connect to broker."
  exit 1
end

connect_time = Time.now.to_f - start_time
puts "Connected to broker in %0.2f seconds." % [connect_time]
puts

ping = ::PCP::Message.new(:message_type => 'http://puppetlabs.com/rpc_blocking_request',
                          :targets => ['pcp://*/agent'],
                          :destination_report => true)

ping.data = {:transaction_id => ping[:id],
             :module => 'echo',
             :action => 'echo',
             :params => {:argument => 'echo'}}.to_json

ping.expires(3)

ping_time = Time.now.to_f
client.send(ping)

begin
  Timeout::timeout(3) do
    done = false
    loop do
      mutex.synchronize do
        have_responses.wait(mutex)
        if expected && expected.all? { |from| responses.include?(from) }
          # Have all responses we expect, bail
          run_time = Time.now.to_f - start_time
          puts
          puts "Received all responses in %0.2f seconds." % [run_time]
          done = true
        end
      end
      break if done
    end
  end
rescue Timeout::Error
  puts
  if expected
    puts "Received %d/%d responses.  Following nodes were missing" % [responses.keys.size, expected.size]
    puts
    expected.select { |from| !responses.include?(from) }.each do |missing|
      puts "    #{missing}"
    end
  else
    puts "Didn't get destination report, not sure how many responses to expect.  We got %d." % [responses.keys.size]
  end
end

EM.stop
